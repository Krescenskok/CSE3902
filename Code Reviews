Author of the code review: Krescens Kok
Date of the code review: 10/04/2020
Sprint number: 2
Name of the .cs file being reviewed: ItemStateMachine.cs
Author of the .cs file being reviewed: Andrew Sanchez
Number of minutes taken to complete the review: 10 minutes
Specific comments on what is readable and what is not: This class was all readable. An enum was created to store all the item names and then added them all to a linked list. Booleans were used to identify whether the item would change going foward in the list or backwards. 


Author of the code review: Krescens
Date of the code review: 10/04/2020
Sprint number: 2
Name of the .cs file being reviewed: ItemsStateMachine.cs
Author of the .cs file being reviewed: Andrew Sanchez
Specific comments on code quality: Good code quality, can do other things to simplify the code and the creation of sprites.
A hypothetical change to make to the game related to file being reviewed and how the current implementation could or could not easily support that change: Create the actual sprites in the sprite factory, instead of creating it in the state machine. The current implementation could easily support the change because it the list would just be copied to the sprite factory class.




Author of the code review: Ann Yan
Date of the code review: 10/04/2020
Sprint number: 2
Name of the .cs file being reviewed: BlocksStateMachine.cs
Author of the .cs file being reviewed: Noah Fabec
Number of minutes taken to complete the review: 5 minutes
Specific comments on what is readable and what is not: Very readable. Variable names are specific and tell its purpose. Utilizes an Enum to list all the various block states cleanly.

Author of the code review: Ann Yan
Date of the code review: 10/04/2020
Sprint number: 2
Name of the .cs file being reviewed: BlocksStateMachine.cs
Author of the .cs file being reviewed: Noah Fabec
Specific comments on code quality: Logic is sound for the sprint, but will be difficult to execute in the final game. The constructor's dictionary makes all the constructors known to the clients, but otherewise appears to have fairly loose coupling and moderately high cohesion (singluar purpose is to change the state of the blocks). 
A hypothetical change to make to the game related to file being reviewed and how the current implementation could or could not easily support that change: Could make all of the constructors in the Dictionary construction part of a factor to hide constructors from the client. Should be fairly hassle-free to implement with the current state of the program. 

Reviewer: Andrew Sanchez
10/5/20
Sprint 2
Enemies/AquamentusAndFireballs/AquamentusNormalSprite.cs
Author: Yuan Hong
Number of minutes taken to complete the review: 10
The logic within the Draw method for AquamentusNormalSprite is very simple and robust.The timing with updatecounter and numUpdatePerFrame works well but it is unclear when
updateCounter receives an initial value.
Changing the sprite image or frame that AquamentusNormalSprite uses would have to be done within another .cs file, as this sprite receives its texture from the method calling its constructor (within aquamentus.cs) and receives the column and row of its 
sprite from the EnemySpriteFactory object. Changes would have to be made within both of those classes if the texture and frame were to change, however in AquamentusNormalSprite no changes would necessarily be made.

Andrew Sanchez
10/4/20
Sprint 2
Enemies/AquamentusAndFireballs/Aquamentus.cs
Yuan Hong
Number of minutes taken to complete the review: 10
The class variable naming convention is very intuitive and it is clear what each represents/does. The methods
are also named clearly. Specifically, the TryAttack()Method makes it very clear that it will countdown
until 0 and then reset the attack countdown timer.
However, SpawnFireBall and Update are less clear, with it not being quite obvious how many fireballs are added when spawning fireballs

Author of the code review: JT Thrash
Date of the code review: 10/05/2020
Sprint number: 2
Name of the .cs file being reviewed: Movement.cs
Author of the .cs file being reviewed: Krescens Kok
Number of minutes taken to complete the review: 10
Specific comments on what is readable and what is not: The naming convention used for class fields is very clear and does a good job
at defining what each variable is responsible for. The conditional branches in the Draw method use meaningful statements such as link.IsDamaged
and link.DamageStartTime from the link class, which makes it easy to quickly decipher the logic being used.
Also, the Methods are condensed while using an appropriate amount of white space. 
However, it is unclear how the gameTime methods are being used and the number 1000 is used in a conditional statement without being defined. 

Author of the code review: JT Thrash	
Date of the code review: 10/05/2020
Sprint number: 2
Name of the .cs file being reviewed: Movement.cs
Author of the .cs file being reviewed: Krescens Kok

Specific comments on code quality: Overall good code quality. The logic for displaying the damaged Link Sprite is concise and easy to understand.
Having abstract methods for the different types of movement makes this class easier to read and removes the more detailed implementation. 
his does a good job of providing a broader view of what's happening at the current level of abstraction because you can only see the logic
that takes of weapon switches in Update. One thing that could be changed is the use of an unprotected variable i that's used to iterate through the list of colors. 
At first, it's unclear what this field does, and it's also unecessary because the index of the current color could be used instead.


A hypothetical change to make to the game related to file being reviewed and how the current implementation could or could not easily support that change: 
A hypothetical change could be allowing link to hold a shield and sword at the same time. This implementation would not easily support that 
change because link only has one current weapon. In, Update there is a return statement after determining which weapon is currently held. 
There is no support for dual-wielding.


Author of the code review: Noah Fabec
Date of the code review: 10/5/2020
Sprint number: 2
Name of the .cs file being reviewed: Stalfos.cs
Amount of Time for Review: 10 minutes
Author of the .cs file being reviewed: JT Thrash
Specific comments on code readability: Method and variable names are very descriptive. Without knowing too much about the character beforehand, I was easily able to tell what it was supposed to do
just by reading the code. The comments as well help clarify things such as else statements that don't necessarily have a description. C# capitalization followed.

Author of the code review: Noah Fabec
Date of the code review: 10/5/2020
Sprint number: 2
Name of the .cs file being reviewed: Stalfos.cs
Amount of Time for Review: 10 minutes
Author of the .cs file being reviewed: JT Thrash
Specific comments on code quality: The methods are for the most part not too complicated so it's easy to use. Uses enum for different directions to make the differections more usable as well
A hypothetical change to make to the game related to file being reviewed and how the current implementation could or could not easily support that change: Instead of using bounds to restrict the movement, a command should be made for moving objects on collision 
since we will soon be implementing solid blocks into the game. It'll be a little difficult to do this since we would have to implement a different action on collision for each moving object.
